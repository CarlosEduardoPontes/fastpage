{
  
    
        "post0": {
            "title": "Análise dos dados do Rio Pinheiros",
            "content": ". !pip install pandas . Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.3.5) Requirement already satisfied: numpy&gt;=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.21.6) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2) Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2022.1) Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas) (1.15.0) . import pandas as pd import numpy as np import matplotlib.pyplot as plt %matplotlib inline import seaborn as sns from IPython import get_ipython import warnings warnings.filterwarnings(&#39;ignore&#39;) . pinheiros = pd.read_excel(&#39;RioPinheiros.xlsx&#39;) . pinheiros.head(8) . ano compostos trecho medicoes . 0 2011 | condutividade_(µS/cm) | PINH0 4100 | 212.0 | . 1 2011 | condutividade_(µS/cm) | PINH0 4250 | 359.0 | . 2 2011 | condutividade_(µS/cm) | PINH0 4500 | 461.0 | . 3 2011 | condutividade_(µS/cm) | PINH0 4900 | 462.0 | . 4 2011 | turbidez(UNT) | PINH0 4100 | 32.0 | . 5 2011 | turbidez(UNT) | PINH0 4250 | 35.0 | . 6 2011 | turbidez(UNT) | PINH0 4500 | 45.0 | . 7 2011 | turbidez(UNT) | PINH0 4900 | 68.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; pinheiros.pivot(index=[&#39;ano&#39;,&#39;trecho&#39;], columns=&#39;compostos&#39;, values=&#39;medicoes&#39;) . compostos E.coli_(UFC/100mL) condutividade_(µS/cm) dbo fosforo nitrato nitrogenio_amoniacal oxigenio_dissolvido turbidez(UNT) . ano trecho . 2011 PINH0 4100 0.00 | 212.0 | 9.17 | 0.29 | 0.53 | 1.81 | 4.90 | 32.0 | . PINH0 4250 0.00 | 359.0 | 58.83 | 1.09 | 0.18 | 9.94 | 1.60 | 35.0 | . PINH0 4500 0.00 | 461.0 | 47.83 | 1.78 | 0.15 | 15.84 | 0.98 | 45.0 | . PINH0 4900 0.00 | 462.0 | 60.67 | 1.92 | 0.15 | 15.85 | 0.24 | 68.0 | . 2012 PINH0 4100 192981.33 | 223.0 | 12.67 | 0.46 | 0.35 | 3.61 | 2.34 | 77.0 | . PINH0 4250 701666.67 | 300.0 | 32.00 | 0.81 | 0.24 | 7.35 | 0.69 | 74.0 | . PINH0 4500 1091666.67 | 384.0 | 28.17 | 1.13 | 0.38 | 10.49 | 1.10 | 53.0 | . PINH0 4900 1465000.00 | 441.0 | 40.00 | 1.43 | 0.18 | 13.31 | 0.31 | 71.0 | . 2013 PINH0 4100 131380.00 | 240.0 | 15.50 | 0.80 | 0.39 | 2.45 | 4.60 | 20.0 | . PINH0 4250 1686666.67 | 342.0 | 37.50 | 1.24 | 0.21 | 8.58 | 2.89 | 46.0 | . PINH0 4500 720000.00 | 401.0 | 44.33 | 1.60 | 0.20 | 12.44 | 2.20 | 39.0 | . PINH0 4900 1631666.67 | 456.0 | 62.17 | 1.90 | 0.20 | 15.37 | 1.30 | 37.0 | . 2014 PINH0 4100 138190.00 | 271.0 | 17.00 | 0.52 | 0.38 | 4.20 | 4.20 | 38.0 | . PINH0 4250 568333.30 | 366.0 | 50.00 | 1.30 | 0.20 | 9.70 | 2.40 | 62.0 | . PINH0 4500 820000.00 | 432.0 | 50.00 | 1.35 | 0.20 | 13.00 | 0.70 | 49.0 | . PINH0 4900 1536666.67 | 511.0 | 67.00 | 2.00 | 0.25 | 16.62 | 0.60 | 42.0 | . 2015 PINH0 4100 613773.00 | 303.0 | 17.00 | 0.74 | 0.35 | 6.53 | 1.53 | 33.0 | . PINH0 4250 900000.00 | 408.0 | 49.50 | 1.74 | 0.20 | 12.98 | 0.62 | 49.0 | . PINH0 4500 1090000.00 | 393.0 | 36.33 | 1.37 | 0.20 | 11.90 | 0.44 | 33.0 | . PINH0 4900 2145000.00 | 500.0 | 57.70 | 2.01 | 0.20 | 15.83 | 0.36 | 34.0 | . 2016 PINH0 4100 240992.00 | 262.0 | 15.20 | 0.52 | 0.50 | 3.76 | 4.40 | 23.0 | . PINH0 4250 1550000.00 | 400.0 | 62.50 | 1.72 | 0.24 | 12.14 | 1.20 | 38.0 | . PINH0 4500 991666.67 | 408.0 | 45.40 | 1.62 | 0.36 | 13.15 | 0.90 | 39.0 | . PINH0 4900 1713333.33 | 438.0 | 53.17 | 1.95 | 0.20 | 14.81 | 0.72 | 43.0 | . 2017 PINH0 4100 105750.00 | 214.0 | 9.67 | 0.29 | 0.61 | 1.68 | 5.30 | 18.0 | . PINH0 4250 453166.67 | 394.0 | 35.17 | 1.40 | 0.26 | 10.60 | 1.89 | 41.0 | . PINH0 4500 823333.33 | 461.0 | 67.40 | 2.33 | 0.20 | 15.10 | 1.46 | 70.0 | . PINH0 4900 2066666.67 | 554.0 | 65.25 | 2.27 | 0.20 | 19.68 | 0.94 | 57.0 | . 2018 PINH0 4100 83546.67 | 257.0 | 17.33 | 0.66 | 0.45 | 3.91 | 5.22 | 28.0 | . PINH0 4250 390000.00 | 411.0 | 39.17 | 1.40 | 0.20 | 12.56 | 3.50 | 34.0 | . PINH0 4500 586666.67 | 462.0 | 48.17 | 1.79 | 0.20 | 16.24 | 0.80 | 32.0 | . PINH0 4900 1686666.67 | 562.0 | 56.00 | 2.42 | 0.20 | 19.80 | 0.70 | 37.0 | . 2019 PINH0 4100 51336.36 | 208.0 | 11.27 | 0.41 | 0.42 | 2.51 | 5.62 | 33.0 | . PINH0 4250 723090.91 | 308.0 | 35.54 | 1.20 | 0.24 | 8.26 | 4.25 | 34.0 | . PINH0 4500 828181.82 | 391.0 | 40.54 | 1.49 | 0.25 | 12.15 | 1.12 | 48.0 | . PINH0 4900 2218181.82 | 512.0 | 56.50 | 2.16 | 0.20 | 18.60 | 0.70 | 48.0 | . 2020 PINH0 4100 518353.33 | 203.0 | 13.23 | 0.49 | 0.57 | 2.91 | 6.67 | 23.0 | . PINH0 4250 656833.33 | 301.0 | 23.55 | 1.02 | 0.25 | 8.29 | 4.70 | 26.0 | . PINH0 4500 1180000.00 | 352.0 | 21.40 | 1.47 | 0.15 | 9.90 | 0.91 | 30.0 | . PINH0 4900 1750000.00 | 428.0 | 25.00 | 1.60 | 0.16 | 12.66 | 0.65 | 32.0 | . 2021 PINH0 4100 31640.00 | 276.0 | 0.00 | 0.29 | 0.58 | 2.03 | 7.30 | 26.0 | . PINH0 4250 487500.00 | 382.0 | 0.00 | 0.50 | 0.19 | 7.17 | 3.20 | 35.0 | . PINH0 4500 1067500.00 | 485.0 | 0.00 | 1.05 | 0.25 | 10.88 | 1.20 | 27.0 | . PINH0 4900 1550000.00 | 607.0 | 50.41 | 1.71 | 0.21 | 14.16 | 0.77 | 29.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df = pinheiros.pivot(index=[&#39;ano&#39;,&#39;trecho&#39;], columns=&#39;compostos&#39;, values=&#39;medicoes&#39;) . df.head() . compostos E.coli_(UFC/100mL) condutividade_(µS/cm) dbo fosforo nitrato nitrogenio_amoniacal oxigenio_dissolvido turbidez(UNT) . ano trecho . 2011 PINH0 4100 0.00 | 212.0 | 9.17 | 0.29 | 0.53 | 1.81 | 4.90 | 32.0 | . PINH0 4250 0.00 | 359.0 | 58.83 | 1.09 | 0.18 | 9.94 | 1.60 | 35.0 | . PINH0 4500 0.00 | 461.0 | 47.83 | 1.78 | 0.15 | 15.84 | 0.98 | 45.0 | . PINH0 4900 0.00 | 462.0 | 60.67 | 1.92 | 0.15 | 15.85 | 0.24 | 68.0 | . 2012 PINH0 4100 192981.33 | 223.0 | 12.67 | 0.46 | 0.35 | 3.61 | 2.34 | 77.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df.tail() . compostos E.coli_(UFC/100mL) condutividade_(µS/cm) dbo fosforo nitrato nitrogenio_amoniacal oxigenio_dissolvido turbidez(UNT) . ano trecho . 2020 PINH0 4900 1750000.0 | 428.0 | 25.00 | 1.60 | 0.16 | 12.66 | 0.65 | 32.0 | . 2021 PINH0 4100 31640.0 | 276.0 | 0.00 | 0.29 | 0.58 | 2.03 | 7.30 | 26.0 | . PINH0 4250 487500.0 | 382.0 | 0.00 | 0.50 | 0.19 | 7.17 | 3.20 | 35.0 | . PINH0 4500 1067500.0 | 485.0 | 0.00 | 1.05 | 0.25 | 10.88 | 1.20 | 27.0 | . PINH0 4900 1550000.0 | 607.0 | 50.41 | 1.71 | 0.21 | 14.16 | 0.77 | 29.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; print(&quot;{} amostras e {} variáveis &quot;.format(df.shape[0],df.shape[1])) . 44 amostras e 8 variáveis . df.columns . Index([&#39;E.coli_(UFC/100mL)&#39;, &#39;condutividade_(µS/cm)&#39;, &#39;dbo &#39;, &#39;fosforo&#39;, &#39;nitrato&#39;, &#39;nitrogenio_amoniacal&#39;, &#39;oxigenio_dissolvido&#39;, &#39;turbidez(UNT)&#39;], dtype=&#39;object&#39;, name=&#39;compostos&#39;) . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; MultiIndex: 44 entries, (2011, &#39;PINH0 4100&#39;) to (2021, &#39;PINH0 4900&#39;) Data columns (total 8 columns): # Column Non-Null Count Dtype -- -- 0 E.coli_(UFC/100mL) 44 non-null float64 1 condutividade_(µS/cm) 44 non-null float64 2 dbo 44 non-null float64 3 fosforo 44 non-null float64 4 nitrato 44 non-null float64 5 nitrogenio_amoniacal 44 non-null float64 6 oxigenio_dissolvido 44 non-null float64 7 turbidez(UNT) 44 non-null float64 dtypes: float64(8) memory usage: 3.5+ KB . df.describe() . compostos E.coli_(UFC/100mL) condutividade_(µS/cm) dbo fosforo nitrato nitrogenio_amoniacal oxigenio_dissolvido turbidez(UNT) . count 4.400000e+01 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | . mean 8.451681e+05 | 380.477273 | 36.028182 | 1.300909 | 0.277955 | 10.471591 | 2.230000 | 40.636364 | . std 6.610955e+05 | 103.716404 | 20.259009 | 0.611304 | 0.126851 | 5.184155 | 1.938572 | 14.763391 | . min 0.000000e+00 | 203.000000 | 0.000000 | 0.290000 | 0.150000 | 1.680000 | 0.240000 | 18.000000 | . 25% 2.289893e+05 | 300.750000 | 17.000000 | 0.785000 | 0.200000 | 7.010000 | 0.715000 | 32.000000 | . 50% 7.215455e+05 | 393.500000 | 38.335000 | 1.385000 | 0.210000 | 11.390000 | 1.250000 | 37.000000 | . 75% 1.482917e+06 | 457.250000 | 51.100000 | 1.750000 | 0.352500 | 14.322500 | 3.675000 | 48.000000 | . max 2.218182e+06 | 607.000000 | 67.400000 | 2.420000 | 0.610000 | 19.800000 | 7.300000 | 77.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df.isnull().sum() . compostos E.coli_(UFC/100mL) 0 condutividade_(µS/cm) 0 dbo 0 fosforo 0 nitrato 0 nitrogenio_amoniacal 0 oxigenio_dissolvido 0 turbidez(UNT) 0 dtype: int64 . df.duplicated().sum() . 0 . df.nunique() . compostos E.coli_(UFC/100mL) 39 condutividade_(µS/cm) 41 dbo 40 fosforo 39 nitrato 20 nitrogenio_amoniacal 44 oxigenio_dissolvido 41 turbidez(UNT) 30 dtype: int64 . plt.figure(figsize=(15,6)) sns.countplot(x = df[&#39;oxigenio_dissolvido&#39;], data = df, palette = &#39;hls&#39;) plt.xticks(rotation = 100) plt.show() . df.oxigenio_dissolvido.hist() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f529ab347d0&gt; . plt.hist(df.oxigenio_dissolvido, bins=20) plt.title(&#39;Histograma&#39;) plt.xlabel(&quot;Valores&quot;) plt.ylabel(&quot;Frequency&quot;) plt.show() . plt.figure(figsize =(15,5)) plt.boxplot(df.oxigenio_dissolvido, vert=False) plt.title(&#39;Oxigênio&#39;) plt.show() . plt.figure(figsize =(8,8)) sns.violinplot(df.oxigenio_dissolvido) plt.title(&#39;Gráfico de Violino&#39;) plt.show() . sns.histplot(data=df, x=&quot;oxigenio_dissolvido&quot;, bins=10, stat=&quot;density&quot;, kde=True) plt.title(&#39;Oxigenação da água&#39;) plt.show() . continous_var = [&#39;condutividade_(µS/cm)&#39;,&#39;turbidez(UNT)&#39;,&#39;nitrato&#39;,&#39;nitrogenio_amoniacal&#39;,&#39;oxigenio_dissolvido&#39;,&#39;fosforo&#39;,&#39;E.coli_(UFC/100mL)&#39;,&#39;dbo &#39;] . n_rows=3 n_cols=3 # Create the subplots fig, axes = plt.subplots(nrows=n_rows, ncols=n_cols) fig.set_size_inches(20, 15) for i, column in enumerate(continous_var): sns.histplot(df[column], ax=axes[i//n_cols,i%n_cols], bins=10, stat=&quot;density&quot;, kde=True) plt.show() . corr_var = df[continous_var].corr() . n_rows=3 n_cols=3 # Create the subplots fig, axes = plt.subplots(nrows=n_rows, ncols=n_cols) fig.set_size_inches(20, 15) for i, column in enumerate(continous_var): sns.lineplot(x=df.reset_index()[&#39;ano&#39;], y=df.reset_index()[column], ax=axes[i//n_cols,i%n_cols]) plt.show() . corr_var . compostos condutividade_(µS/cm) turbidez(UNT) nitrato nitrogenio_amoniacal oxigenio_dissolvido fosforo E.coli_(UFC/100mL) dbo . compostos . condutividade_(µS/cm) 1.000000 | 0.244869 | -0.731617 | 0.940895 | -0.780393 | 0.881291 | 0.687930 | 0.726749 | . turbidez(UNT) 0.244869 | 1.000000 | -0.418149 | 0.344674 | -0.497580 | 0.325416 | 0.139804 | 0.422510 | . nitrato -0.731617 | -0.418149 | 1.000000 | -0.783070 | 0.791634 | -0.747906 | -0.499565 | -0.653866 | . nitrogenio_amoniacal 0.940895 | 0.344674 | -0.783070 | 1.000000 | -0.819912 | 0.961305 | 0.684249 | 0.841140 | . oxigenio_dissolvido -0.780393 | -0.497580 | 0.791634 | -0.819912 | 1.000000 | -0.765166 | -0.599576 | -0.677900 | . fosforo 0.881291 | 0.325416 | -0.747906 | 0.961305 | -0.765166 | 1.000000 | 0.691491 | 0.883362 | . E.coli_(UFC/100mL) 0.687930 | 0.139804 | -0.499565 | 0.684249 | -0.599576 | 0.691491 | 1.000000 | 0.528238 | . dbo 0.726749 | 0.422510 | -0.653866 | 0.841140 | -0.677900 | 0.883362 | 0.528238 | 1.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; plt.figure(figsize = (15,10)) sns.heatmap(data = corr_var, linewidths=.5, annot=True, fmt=&quot;.2f&quot;) plt.show() .",
            "url": "https://carloseduardopontes.github.io/fastpage/fastpages/jupyter/2022/08/15/_rioPinheiros.html",
            "relUrl": "/fastpages/jupyter/2022/08/15/_rioPinheiros.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Selenium",
            "content": ". ## sudo mv chomedriver /usr/local/bin . !pip install selenium . ^C . import time from selenium import webdriver from selenium.webdriver.edge.options import Options import pandas as pd . chrome_options = Options() chrome_options.add_argument(&quot;--incognito&quot;) chrome_options.add_argument(&quot;--window-size=1920x1080&quot;) . # https://www.selenium.dev/pt-br/documentation/getting_started/installing_browser_drivers/ driver = webdriver.Chrome(chrome_options=chrome_options) . &lt;ipython-input-5-1b7304469e66&gt;:4: DeprecationWarning: use options instead of chrome_options driver = webdriver.Chrome(chrome_options=chrome_options) . url = &quot;https://www.kabum.com.br/&quot; driver.get(url) time.sleep(2) . Localizadores de Elementos . Por id . els = driver.find_elements_by_id(elementId) . Por Nome . els = driver.find_elements_by_name(elementName) . Por Classe . els = driver.find_elements_by_class_name(elementClass) . Por Texto Especifico . els = driver.find_elements_by_link_text(elementLink) . Por Parte do Texto . els = driver.find_elements_by_partial_link_text(elementpartialLink) . Por seletor css . Tipos de seletores . . = Classe . &#39;#&#39; = id . Referencias : https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Selectors . els = driver.find_elements_by_css_selector(element_css_selector) . Por caminho Xpath . els = driver.find_elements_by_xpath(element_x_path) . input_search = driver.find_element_by_xpath(&#39;//*[@id=&quot;input-busca&quot;]&#39;) . Tipos de A&#231;&#245;es . Referencia: https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/interactions/Actions.html . Principais ações: . click - Envia ação de click ao elemento. | send_keys - Envia texto ao elemento de input | double_click - Envia duplo click ao elemento. | . input_search.send_keys(&#39;processadores&#39;) . . buttom_search = driver.find_element_by_xpath(&#39;//*[@id=&quot;barraBuscaKabum&quot;]/div/form/button&#39;) buttom_search.click() . time.sleep(2) . main_element = driver.find_element_by_xpath(&#39;//*[@id=&quot;listing&quot;]/article/section/div[3]/div/main&#39;) . main_element . &lt;selenium.webdriver.remote.webelement.WebElement (session=&#34;8ade6579c8cb17b1a63db95c532ad9e5&#34;, element=&#34;03b8817e-5c00-48cd-83ba-69b2ba6e4c13&#34;)&gt; . product_title = main_element.find_element_by_css_selector(&#39;#listing &gt; article &gt; section &gt; div.sc-cwpsFg.eHWKRV &gt; div &gt; main &gt; div:nth-child(1) &gt; a &gt; div &gt; div.sc-dWINGa.gAQKfg &gt; h2 &gt; span&#39;).text . product_title . &#39;Processador AMD Ryzen 5 5600X, Cache 35MB, 3.7GHz (4.6GHz Max Turbo), AM4, Sem Vídeo - 100-100000065BOX&#39; . product_price = main_element.find_element_by_css_selector(&#39;#listing &gt; article &gt; section &gt; div.sc-cwpsFg.eHWKRV &gt; div &gt; main &gt; div:nth-child(1) &gt; a &gt; div &gt; div.sc-GVOUr.eOBSFM.availablePricesCard &gt; span.sc-dwLEzm.bXwgF.priceCard&#39;).text . product_title . &#39;Processador AMD Ryzen 5 5600X, Cache 35MB, 3.7GHz (4.6GHz Max Turbo), AM4, Sem Vídeo - 100-100000065BOX&#39; . product_price . &#39;R$ 1.459,90&#39; . Pegando todos os pre&#231;os de uma Busca . . title_results = main_element.find_elements_by_css_selector(&#39;.nameCard&#39;) . result = [] for title in title_results: result.append(title.text) result . [&#39;Processador AMD Ryzen 5 5600X, Cache 35MB, 3.7GHz (4.6GHz Max Turbo), AM4, Sem Vídeo - 100-100000065BOX&#39;, &#39;Processador AMD Ryzen 5 5600G, 3.9GHz (4.4GHz Max Turbo), AM4, Vídeo Integrado, 6 Núcleos - 100-100000252BOX&#39;, &#39;Processador Intel Core i5-10400, Cache 12MB, 2.9GHz (4.3GHz Max Turbo), LGA 1200 - BX8070110400&#39;, &#39;Processador Intel Core i3-10105, Cache 6MB, 3.7GHz (4.4GHz Max Turbo), LGA 1200 - BX8070110105&#39;, &#39;Processador Intel Core i3-10100F, Cache 6MB, 4.30 GHz, LGA 1200 - BX8070110100F&#39;, &#39;Processador AMD Ryzen 7 5700G, 3.8GHz (4.6GHz Max Turbo), AM4, Vídeo Integrado, 8 Núcleos - 100-100000263BOX&#39;, &#39;Processador AMD Ryzen 7 5800X, Cache 36MB, 3.8GHz (4.7GHz Max Turbo), AM4 - 100-100000063WOF&#39;, &#39;Processador AMD Ryzen 5 3600 Cache 32MB 3.6GHz(4.2GHz Max Turbo) AM4, Sem Vídeo - 100-100000031BOX&#39;, &#39;Processador Intel Core i5-10400F, Cache 12MB, 2.9GHz (4.3GHz Max Turbo), LGA 1200 - BX8070110400F&#39;, &#39;Processador Intel Core i7-10700F, Cache 16MB, 2.9GHz (4.8GHz Max Turbo), LGA 1200 - BX8070110700F&#39;, &#39;Processador AMD Ryzen 9 5900X, Cache 70MB, 3.7GHz (4.8GHz Max Turbo), AM4 - 100-100000061WOF&#39;, &#39;Processador Intel Core i7-9700KF Coffee Lake Refresh, Cache 12MB, 3.6GHz (4.9GHz Max Turbo), LGA 1151, Sem Vídeo - BX80684I79700KF&#39;, &#39;Processador Intel Core i5-11400 11ª Geração, Cache 12MB, 2.6 GHz (4.4GHz Turbo), LGA1200 - BX8070811400&#39;, &#39;Processador Intel Core i7-12700K, Cache 25MB, 3.6GHz (5.0GHz Max Turbo), LGA 1700 - BX8071512700K&#39;, &#39;Processador Intel Pentium Gold G6400 Processor, Cache 4MB, 4.00 GHz - BX80701G6400&#39;, &#39;Processador Intel Core i3-12100F, Cache 12MB, 3.3GHz (4.3GHz Max Turbo), LGA 1700 - BX8071512100F&#39;, &#39;Processador Intel Core i3-10100, Cache 6MB, 3.6GHz (4.3GHz Max Turbo), LGA 1200 - BX8070110100&#39;, &#39;Processador Intel Core i5-12400, Cache 18MB, 2.5GHz (4.4GHz Max Turbo), LGA 1700 - BX8071512400&#39;, &#39;Processador AMD Ryzen 9 5950X, Cache 72MB, 3.4GHz (4.9GHz Max Turbo), AM4 - 100-100000059WOF&#39;, &#39;Processador Intel Core i5-12600K, Cache 20MB, 3.7GHz (4.9GHz Max Turbo), LGA 1700 - BX8071512600K&#39;] . product_list = [title.text for title in title_results] . # product_list = [] # for el in title_results: # product_list.append(el.text) . price_results = main_element.find_elements_by_css_selector(&#39;.priceCard&#39;) . price_list = [el.text for el in price_results] . ConnectionRefusedError Traceback (most recent call last) C: ProgramData Anaconda3 lib site-packages urllib3 connection.py in _new_conn(self) 168 try: --&gt; 169 conn = connection.create_connection( 170 (self._dns_host, self.port), self.timeout, **extra_kw C: ProgramData Anaconda3 lib site-packages urllib3 util connection.py in create_connection(address, timeout, source_address, socket_options) 95 if err is not None: &gt; 96 raise err 97 C: ProgramData Anaconda3 lib site-packages urllib3 util connection.py in create_connection(address, timeout, source_address, socket_options) 85 sock.bind(source_address) &gt; 86 sock.connect(sa) 87 return sock ConnectionRefusedError: [WinError 10061] Nenhuma conexão pôde ser feita porque a máquina de destino as recusou ativamente During handling of the above exception, another exception occurred: NewConnectionError Traceback (most recent call last) C: ProgramData Anaconda3 lib site-packages urllib3 connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 698 # Make the request on the httplib connection object. --&gt; 699 httplib_response = self._make_request( 700 conn, C: ProgramData Anaconda3 lib site-packages urllib3 connectionpool.py in _make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw) 393 else: --&gt; 394 conn.request(method, url, **httplib_request_kw) 395 C: ProgramData Anaconda3 lib site-packages urllib3 connection.py in request(self, method, url, body, headers) 233 headers[&#34;User-Agent&#34;] = _get_default_user_agent() --&gt; 234 super(HTTPConnection, self).request(method, url, body=body, headers=headers) 235 C: ProgramData Anaconda3 lib http client.py in request(self, method, url, body, headers, encode_chunked) 1254 &#34;&#34;&#34;Send a complete request to the server.&#34;&#34;&#34; -&gt; 1255 self._send_request(method, url, body, headers, encode_chunked) 1256 C: ProgramData Anaconda3 lib http client.py in _send_request(self, method, url, body, headers, encode_chunked) 1300 body = _encode(body, &#39;body&#39;) -&gt; 1301 self.endheaders(body, encode_chunked=encode_chunked) 1302 C: ProgramData Anaconda3 lib http client.py in endheaders(self, message_body, encode_chunked) 1249 raise CannotSendHeader() -&gt; 1250 self._send_output(message_body, encode_chunked=encode_chunked) 1251 C: ProgramData Anaconda3 lib http client.py in _send_output(self, message_body, encode_chunked) 1009 del self._buffer[:] -&gt; 1010 self.send(msg) 1011 C: ProgramData Anaconda3 lib http client.py in send(self, data) 949 if self.auto_open: --&gt; 950 self.connect() 951 else: C: ProgramData Anaconda3 lib site-packages urllib3 connection.py in connect(self) 199 def connect(self): --&gt; 200 conn = self._new_conn() 201 self._prepare_conn(conn) C: ProgramData Anaconda3 lib site-packages urllib3 connection.py in _new_conn(self) 180 except SocketError as e: --&gt; 181 raise NewConnectionError( 182 self, &#34;Failed to establish a new connection: %s&#34; % e NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0000018F10FE58E0&gt;: Failed to establish a new connection: [WinError 10061] Nenhuma conexão pôde ser feita porque a máquina de destino as recusou ativamente During handling of the above exception, another exception occurred: MaxRetryError Traceback (most recent call last) &lt;ipython-input-60-5b4cbcee4215&gt; in &lt;module&gt; -&gt; 1 price_list = [el.text for el in price_results] &lt;ipython-input-60-5b4cbcee4215&gt; in &lt;listcomp&gt;(.0) -&gt; 1 price_list = [el.text for el in price_results] C: ProgramData Anaconda3 lib site-packages selenium webdriver remote webelement.py in text(self) 74 def text(self): 75 &#34;&#34;&#34;The text of the element.&#34;&#34;&#34; &gt; 76 return self._execute(Command.GET_ELEMENT_TEXT)[&#39;value&#39;] 77 78 def click(self): C: ProgramData Anaconda3 lib site-packages selenium webdriver remote webelement.py in _execute(self, command, params) 631 params = {} 632 params[&#39;id&#39;] = self._id --&gt; 633 return self._parent.execute(command, params) 634 635 def find_element(self, by=By.ID, value=None): C: ProgramData Anaconda3 lib site-packages selenium webdriver remote webdriver.py in execute(self, driver_command, params) 317 318 params = self._wrap_value(params) --&gt; 319 response = self.command_executor.execute(driver_command, params) 320 if response: 321 self.error_handler.check_response(response) C: ProgramData Anaconda3 lib site-packages selenium webdriver remote remote_connection.py in execute(self, command, params) 372 data = utils.dump_json(params) 373 url = &#39;%s%s&#39; % (self._url, path) --&gt; 374 return self._request(command_info[0], url, body=data) 375 376 def _request(self, method, url, body=None): C: ProgramData Anaconda3 lib site-packages selenium webdriver remote remote_connection.py in _request(self, method, url, body) 395 396 if self.keep_alive: --&gt; 397 resp = self._conn.request(method, url, body=body, headers=headers) 398 399 statuscode = resp.status C: ProgramData Anaconda3 lib site-packages urllib3 request.py in request(self, method, url, fields, headers, **urlopen_kw) 72 73 if method in self._encode_url_methods: &gt; 74 return self.request_encode_url( 75 method, url, fields=fields, headers=headers, **urlopen_kw 76 ) C: ProgramData Anaconda3 lib site-packages urllib3 request.py in request_encode_url(self, method, url, fields, headers, **urlopen_kw) 94 url += &#34;?&#34; + urlencode(fields) 95 &gt; 96 return self.urlopen(method, url, **extra_kw) 97 98 def request_encode_body( C: ProgramData Anaconda3 lib site-packages urllib3 poolmanager.py in urlopen(self, method, url, redirect, **kw) 373 response = conn.urlopen(method, url, **kw) 374 else: --&gt; 375 response = conn.urlopen(method, u.request_uri, **kw) 376 377 redirect_location = redirect and response.get_redirect_location() C: ProgramData Anaconda3 lib site-packages urllib3 connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 781 &#34;Retrying (%r) after connection broken by &#39;%r&#39;: %s&#34;, retries, err, url 782 ) --&gt; 783 return self.urlopen( 784 method, 785 url, C: ProgramData Anaconda3 lib site-packages urllib3 connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 781 &#34;Retrying (%r) after connection broken by &#39;%r&#39;: %s&#34;, retries, err, url 782 ) --&gt; 783 return self.urlopen( 784 method, 785 url, C: ProgramData Anaconda3 lib site-packages urllib3 connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 781 &#34;Retrying (%r) after connection broken by &#39;%r&#39;: %s&#34;, retries, err, url 782 ) --&gt; 783 return self.urlopen( 784 method, 785 url, C: ProgramData Anaconda3 lib site-packages urllib3 connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 753 e = ProtocolError(&#34;Connection aborted.&#34;, e) 754 --&gt; 755 retries = retries.increment( 756 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2] 757 ) C: ProgramData Anaconda3 lib site-packages urllib3 util retry.py in increment(self, method, url, response, error, _pool, _stacktrace) 572 573 if new_retry.is_exhausted(): --&gt; 574 raise MaxRetryError(_pool, url, error or ResponseError(cause)) 575 576 log.debug(&#34;Incremented Retry for (url=&#39;%s&#39;): %r&#34;, url, new_retry) MaxRetryError: HTTPConnectionPool(host=&#39;127.0.0.1&#39;, port=54735): Max retries exceeded with url: /session/8ade6579c8cb17b1a63db95c532ad9e5/element/b187cc0e-9836-4e43-a0d0-7348a24613ed/text (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x0000018F10FE58E0&gt;: Failed to establish a new connection: [WinError 10061] Nenhuma conexão pôde ser feita porque a máquina de destino as recusou ativamente&#39;)) . df = pd.DataFrame({&#39;produto&#39;:product_list, &#39;preco&#39;:price_list}) . df.to_csv(&quot;../07-04-22.csv&quot;) . driver.quit() . Exercicios: . Praticar conceitos realizando Scrapping de Vagas Linkedin. . link a ser utilizado: https://br.linkedin.com/jobs/ci%C3%AAncia-de-dados-vagas?position=1&amp;pageNum=0 . Colete o Titulo e Descrição das vagas em Ciencia de Dados, o seletor de elementos fica a seu critério. .",
            "url": "https://carloseduardopontes.github.io/fastpage/2022/08/15/_Selenium_Kabum.html",
            "relUrl": "/2022/08/15/_Selenium_Kabum.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Regressão",
            "content": ". import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score . df = pd.read_csv(&#39;houses.csv&#39;, sep=&#39; t&#39;) display(df) . CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO LSTAT MEDV . 0 0.00632 | 18.0 | 2.31 | 0 | 0.538 | 6.575 | 65.2 | 4.0900 | 1 | 296 | 15.3 | 4.98 | 24.0 | . 1 0.02731 | 0.0 | 7.07 | 0 | 0.469 | 6.421 | 78.9 | 4.9671 | 2 | 242 | 17.8 | 9.14 | 21.6 | . 2 0.02729 | 0.0 | 7.07 | 0 | 0.469 | 7.185 | 61.1 | 4.9671 | 2 | 242 | 17.8 | 4.03 | 34.7 | . 3 0.03237 | 0.0 | 2.18 | 0 | 0.458 | 6.998 | 45.8 | 6.0622 | 3 | 222 | 18.7 | 2.94 | 33.4 | . 4 0.06905 | 0.0 | 2.18 | 0 | 0.458 | 7.147 | 54.2 | 6.0622 | 3 | 222 | 18.7 | 5.33 | 36.2 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 501 0.06263 | 0.0 | 11.93 | 0 | 0.573 | 6.593 | 69.1 | 2.4786 | 1 | 273 | 21.0 | 9.67 | 22.4 | . 502 0.04527 | 0.0 | 11.93 | 0 | 0.573 | 6.120 | 76.7 | 2.2875 | 1 | 273 | 21.0 | 9.08 | 20.6 | . 503 0.06076 | 0.0 | 11.93 | 0 | 0.573 | 6.976 | 91.0 | 2.1675 | 1 | 273 | 21.0 | 5.64 | 23.9 | . 504 0.10959 | 0.0 | 11.93 | 0 | 0.573 | 6.794 | 89.3 | 2.3889 | 1 | 273 | 21.0 | 6.48 | 22.0 | . 505 0.04741 | 0.0 | 11.93 | 0 | 0.573 | 6.030 | 80.8 | 2.5050 | 1 | 273 | 21.0 | 7.88 | 11.9 | . 506 rows × 13 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; print(&quot;o dataframe contém {} amostras e {} variaveis&quot;.format(df.shape[0],df.shape[1])) . o dataframe contém 506 amostras e 13 variaveis . df[df.isna()].count() . CRIM 0 ZN 0 INDUS 0 CHAS 0 NOX 0 RM 0 AGE 0 DIS 0 RAD 0 TAX 0 PTRATIO 0 LSTAT 0 MEDV 0 dtype: int64 . df.hist(figsize=(10,10),bins=20) df.describe() . CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO LSTAT MEDV . count 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | . mean 3.613524 | 11.363636 | 11.136779 | 0.069170 | 0.554695 | 6.284634 | 68.574901 | 3.795043 | 9.549407 | 408.237154 | 18.455534 | 12.653063 | 22.532806 | . std 8.601545 | 23.322453 | 6.860353 | 0.253994 | 0.115878 | 0.702617 | 28.148861 | 2.105710 | 8.707259 | 168.537116 | 2.164946 | 7.141062 | 9.197104 | . min 0.006320 | 0.000000 | 0.460000 | 0.000000 | 0.385000 | 3.561000 | 2.900000 | 1.129600 | 1.000000 | 187.000000 | 12.600000 | 1.730000 | 5.000000 | . 25% 0.082045 | 0.000000 | 5.190000 | 0.000000 | 0.449000 | 5.885500 | 45.025000 | 2.100175 | 4.000000 | 279.000000 | 17.400000 | 6.950000 | 17.025000 | . 50% 0.256510 | 0.000000 | 9.690000 | 0.000000 | 0.538000 | 6.208500 | 77.500000 | 3.207450 | 5.000000 | 330.000000 | 19.050000 | 11.360000 | 21.200000 | . 75% 3.677083 | 12.500000 | 18.100000 | 0.000000 | 0.624000 | 6.623500 | 94.075000 | 5.188425 | 24.000000 | 666.000000 | 20.200000 | 16.955000 | 25.000000 | . max 88.976200 | 100.000000 | 27.740000 | 1.000000 | 0.871000 | 8.780000 | 100.000000 | 12.126500 | 24.000000 | 711.000000 | 22.000000 | 37.970000 | 50.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; sns.pairplot(df[[&#39;RM&#39;,&#39;LSTAT&#39;,&#39;PTRATIO&#39;,&#39;MEDV&#39;]]) . &lt;seaborn.axisgrid.PairGrid at 0x7f7e9a81d410&gt; . corr = df.corr() print(corr[(corr &gt; 0.5) | (corr &lt; -0.5)]) sns.heatmap(corr) . CRIM ZN INDUS CHAS NOX RM AGE CRIM 1.000000 NaN NaN NaN NaN NaN NaN ZN NaN 1.000000 -0.533828 NaN -0.516604 NaN -0.569537 INDUS NaN -0.533828 1.000000 NaN 0.763651 NaN 0.644779 CHAS NaN NaN NaN 1.0 NaN NaN NaN NOX NaN -0.516604 0.763651 NaN 1.000000 NaN 0.731470 RM NaN NaN NaN NaN NaN 1.000000 NaN AGE NaN -0.569537 0.644779 NaN 0.731470 NaN 1.000000 DIS NaN 0.664408 -0.708027 NaN -0.769230 NaN -0.747881 RAD 0.625505 NaN 0.595129 NaN 0.611441 NaN NaN TAX 0.582764 NaN 0.720760 NaN 0.668023 NaN 0.506456 PTRATIO NaN NaN NaN NaN NaN NaN NaN LSTAT NaN NaN 0.603800 NaN 0.590879 -0.613808 0.602339 MEDV NaN NaN NaN NaN NaN 0.695360 NaN DIS RAD TAX PTRATIO LSTAT MEDV CRIM NaN 0.625505 0.582764 NaN NaN NaN ZN 0.664408 NaN NaN NaN NaN NaN INDUS -0.708027 0.595129 0.720760 NaN 0.603800 NaN CHAS NaN NaN NaN NaN NaN NaN NOX -0.769230 0.611441 0.668023 NaN 0.590879 NaN RM NaN NaN NaN NaN -0.613808 0.695360 AGE -0.747881 NaN 0.506456 NaN 0.602339 NaN DIS 1.000000 NaN -0.534432 NaN NaN NaN RAD NaN 1.000000 0.910228 NaN NaN NaN TAX -0.534432 0.910228 1.000000 NaN 0.543993 NaN PTRATIO NaN NaN NaN 1.000000 NaN -0.507787 LSTAT NaN NaN 0.543993 NaN 1.000000 -0.737663 MEDV NaN NaN NaN -0.507787 -0.737663 1.000000 . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f7e9b14c1d0&gt; . fig, axes = plt.subplots(1,2,figsize=(10,6)) sns.scatterplot(ax=axes[0], x=&#39;LSTAT&#39;,y=&#39;MEDV&#39;,data=df) sns.scatterplot(ax=axes[1], x=&#39;RM&#39;,y=&#39;MEDV&#39;,data=df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f7e9b45d1d0&gt; . sns.distplot(df.MEDV,bins=20) . /usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f7e9b50a1d0&gt; . train, test = train_test_split(df,train_size=0.8) X_train, X_test, y_train, y_test = train_test_split(df[[&#39;LSTAT&#39;,&#39;RM&#39;]], df[&#39;MEDV&#39;], train_size=0.8, random_state=1) . reg = LinearRegression() reg.fit(X_train,y_train) . LinearRegression() . reg.score(X_train, y_train) . 0.6251836356449056 . y_pred = reg.predict(X_test) r2_score(y_test,y_pred) . 0.6753556251471677 .",
            "url": "https://carloseduardopontes.github.io/fastpage/fastpages/jupyter/2022/08/15/_Regress%C3%A3o.html",
            "relUrl": "/fastpages/jupyter/2022/08/15/_Regress%C3%A3o.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": ". ! git clone https://github.com/Mario-RJunior/data-manipulation-exercises . Cloning into &#39;data-manipulation-exercises&#39;... remote: Enumerating objects: 31, done. remote: Counting objects: 100% (14/14), done. remote: Compressing objects: 100% (4/4), done. remote: Total 31 (delta 10), reused 10 (delta 10), pack-reused 17 Unpacking objects: 100% (31/31), done. . cd data-manipulation-exercises/ . /content/data-manipulation-exercises . ls . datasets/ Manipulacao_de_Dados_Ex_02.ipynb README.md Manipulacao_de_Dados_Ex_01.ipynb Manipulacao_de_Dados_Ex_03.ipynb . import pandas as pd . users = pd.read_csv(&#39;datasets/users_dataset.csv&#39;, sep=&#39;|&#39;) . users.head(15) . user_id age gender occupation zip_code . 0 1 | 24 | M | technician | 85711 | . 1 2 | 53 | F | other | 94043 | . 2 3 | 23 | M | writer | 32067 | . 3 4 | 24 | M | technician | 43537 | . 4 5 | 33 | F | other | 15213 | . 5 6 | 42 | M | executive | 98101 | . 6 7 | 57 | M | administrator | 91344 | . 7 8 | 36 | M | administrator | 05201 | . 8 9 | 29 | M | student | 01002 | . 9 10 | 53 | M | lawyer | 90703 | . 10 11 | 39 | F | other | 30329 | . 11 12 | 28 | F | other | 06405 | . 12 13 | 47 | M | educator | 29206 | . 13 14 | 45 | M | scientist | 55106 | . 14 15 | 49 | F | educator | 97301 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; users.tail(10) . user_id age gender occupation zip_code . 933 934 | 61 | M | engineer | 22902 | . 934 935 | 42 | M | doctor | 66221 | . 935 936 | 24 | M | other | 32789 | . 936 937 | 48 | M | educator | 98072 | . 937 938 | 38 | F | technician | 55038 | . 938 939 | 26 | F | student | 33319 | . 939 940 | 32 | M | administrator | 02215 | . 940 941 | 20 | M | student | 97229 | . 941 942 | 48 | F | librarian | 78209 | . 942 943 | 22 | M | student | 77841 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; users.shape . (943, 5) . users.columns . Index([&#39;user_id&#39;, &#39;age&#39;, &#39;gender&#39;, &#39;occupation&#39;, &#39;zip_code&#39;], dtype=&#39;object&#39;) . users.dtypes . user_id int64 age int64 gender object occupation object zip_code object dtype: object . users[&#39;occupation&#39;] . 0 technician 1 other 2 writer 3 technician 4 other ... 938 student 939 administrator 940 student 941 librarian 942 student Name: occupation, Length: 943, dtype: object . len(users[&#39;occupation&#39;].unique()) . 21 . users[&#39;occupation&#39;].value_counts() . student 196 other 105 educator 95 administrator 79 engineer 67 programmer 66 librarian 51 writer 45 executive 32 scientist 31 artist 28 technician 27 marketing 26 entertainment 18 healthcare 16 retired 14 lawyer 12 salesman 12 none 9 homemaker 7 doctor 7 Name: occupation, dtype: int64 . users[&#39;age&#39;].mean() . 34.05196182396607 . users.describe() . user_id age . count 943.000000 | 943.000000 | . mean 472.000000 | 34.051962 | . std 272.364951 | 12.192740 | . min 1.000000 | 7.000000 | . 25% 236.500000 | 25.000000 | . 50% 472.000000 | 31.000000 | . 75% 707.500000 | 43.000000 | . max 943.000000 | 73.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt;",
            "url": "https://carloseduardopontes.github.io/fastpage/2022/08/15/_Pandas.html",
            "relUrl": "/2022/08/15/_Pandas.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "EDA dos dados coletados web scraping - Calculadora de alugel",
            "content": ". !pip install pandas . Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.3.5) Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2022.1) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2) Requirement already satisfied: numpy&gt;=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.21.6) Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas) (1.15.0) . import pandas as pd import seaborn as sns from sklearn.model_selection import train_test_split import numpy as np . df = pd.read_excel(&#39;calculadora.xlsx&#39;) . df.head(4) . endereco metragem quartos banheiros vagas precos . 0 rua frança pinto, 1253 - vila mariana, são pau... | 80 | 2 | 2 | 2 | 3850 | . 1 rua das grumixamas, 253 - vila parque jabaquar... | 55 | 2 | 2 | 2 | 2020 | . 2 rua caio prado, 247 - consolação, são paulo - sp | 35 | 1 | 1 | 1 | 2700 | . 3 rua monte aprazível, 109 - vila nova conceição... | 32 | 2 | 2 | 2 | 2800 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 36 entries, 0 to 35 Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 endereco 36 non-null object 1 metragem 36 non-null int64 2 quartos 36 non-null int64 3 banheiros 36 non-null int64 4 vagas 36 non-null int64 5 precos 36 non-null int64 dtypes: int64(5), object(1) memory usage: 1.8+ KB . df.describe().T . count mean std min 25% 50% 75% max . metragem 36.0 | 64.805556 | 31.558399 | 26.0 | 44.50 | 54.5 | 75.5 | 136.0 | . quartos 36.0 | 1.444444 | 0.652225 | 1.0 | 1.00 | 1.0 | 2.0 | 3.0 | . banheiros 36.0 | 1.444444 | 0.652225 | 1.0 | 1.00 | 1.0 | 2.0 | 3.0 | . vagas 36.0 | 1.416667 | 0.691789 | 0.0 | 1.00 | 1.0 | 2.0 | 3.0 | . precos 36.0 | 4056.805556 | 3807.680087 | 881.0 | 2191.75 | 3150.0 | 3812.5 | 22000.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; treino, teste = train_test_split(df, stratify=df[&#39;quartos&#39;], test_size=0.25, random_state=0 ) . sns.pairplot(treino, kind=&#39;reg&#39;, plot_kws={&#39;line_kws&#39;:{&#39;color&#39;:&#39;orange&#39;}}) . &lt;seaborn.axisgrid.PairGrid at 0x7f703528ce10&gt; . sns.pairplot(treino, hue=&#39;quartos&#39;) . &lt;seaborn.axisgrid.PairGrid at 0x7f7035282090&gt; . treino.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 27 entries, 1 to 34 Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 endereco 27 non-null object 1 metragem 27 non-null int64 2 quartos 27 non-null int64 3 banheiros 27 non-null int64 4 vagas 27 non-null int64 5 precos 27 non-null int64 dtypes: int64(5), object(1) memory usage: 2.5+ KB . Tratamento dos dados . num_cols = [&#39;metragem&#39;, &#39;quartos&#39;,&#39;banheiros&#39;,&#39;vagas&#39;,&#39;precos&#39;] treino_num = treino[num_cols] . treino_medianas = treino_num.median() treino_num = treino_num.fillna(treino_medianas) treino_num.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 27 entries, 1 to 34 Data columns (total 5 columns): # Column Non-Null Count Dtype -- -- 0 metragem 27 non-null int64 1 quartos 27 non-null int64 2 banheiros 27 non-null int64 3 vagas 27 non-null int64 4 precos 27 non-null int64 dtypes: int64(5) memory usage: 2.3 KB . import numpy as np treino_num=treino_num.apply(np.log1p) . treino[num_cols] = treino_num . sns.pairplot(treino, kind=&#39;reg&#39;, plot_kws={&#39;line_kws&#39;:{&#39;color&#39;:&#39;orange&#39;}}) . &lt;seaborn.axisgrid.PairGrid at 0x7f702e654590&gt; . sns.pairplot(treino, hue=&#39;quartos&#39;) . &lt;seaborn.axisgrid.PairGrid at 0x7f702e654c90&gt; . REMOVER_OUTLIERS = False quartis = treino_num.quantile([0.25,0.5,0.75]) Q1 = quartis.loc[0.25] Q3 = quartis.loc[0.75] IQR = Q3-Q1 k = 1.5 limite_inferior = Q1-k*IQR limite_superior = Q1+k*IQR treino_num_sem_outlier = treino_num[treino_num&gt;=limite_inferior].dropna() treino_num_sem_outlier = treino_num_sem_outlier[treino_num_sem_outlier&lt;=limite_superior].dropna() if REMOVER_OUTLIERS: treino = treino.loc[treino_num_sem_outlier.index] treino_num_sem_outlier . metragem quartos banheiros vagas precos . 1 4.025352 | 1.098612 | 1.098612 | 1.098612 | 7.611348 | . 12 4.262680 | 0.693147 | 0.693147 | 0.693147 | 7.863651 | . 28 4.007333 | 1.098612 | 1.098612 | 1.098612 | 8.216358 | . 5 3.931826 | 0.693147 | 0.693147 | 0.693147 | 8.216358 | . 17 3.332205 | 0.693147 | 0.693147 | 0.693147 | 7.601402 | . 7 3.871201 | 0.693147 | 0.693147 | 0.693147 | 7.170120 | . 31 4.394449 | 0.693147 | 0.693147 | 0.693147 | 8.160804 | . 29 3.295837 | 0.693147 | 0.693147 | 0.693147 | 8.006701 | . 3 3.496508 | 1.098612 | 1.098612 | 1.098612 | 7.937732 | . 22 3.784190 | 0.693147 | 0.693147 | 0.693147 | 7.989899 | . 19 3.931826 | 0.693147 | 0.693147 | 0.693147 | 7.696667 | . 9 4.330733 | 0.693147 | 0.693147 | 0.693147 | 7.170888 | . 0 4.394449 | 1.098612 | 1.098612 | 1.098612 | 8.256088 | . 11 3.891820 | 0.693147 | 0.693147 | 0.693147 | 8.006701 | . 14 4.189655 | 0.693147 | 0.693147 | 0.693147 | 8.216358 | . 15 3.433987 | 0.693147 | 0.693147 | 0.693147 | 8.146419 | . 35 4.304065 | 0.693147 | 0.693147 | 0.693147 | 7.208600 | . 34 3.988984 | 1.098612 | 1.098612 | 1.098612 | 8.188967 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; sns.pairplot(treino_num_sem_outlier, kind=&#39;reg&#39;, plot_kws={&#39;line_kws&#39;:{&#39;color&#39;:&#39;orange&#39;}}) . &lt;seaborn.axisgrid.PairGrid at 0x7f702d3f92d0&gt; . sns.pairplot(treino.loc[treino_num_sem_outlier.index], hue=&#39;quartos&#39;) . &lt;seaborn.axisgrid.PairGrid at 0x7f702b0d8090&gt; . Colunas categ&#243;ricas . cat_cols = [&#39;quartos&#39;] treino_cat = treino[cat_cols] . treino_cat = pd.get_dummies(treino_cat) . treino = pd.concat([treino_cat, treino.drop(cat_cols, axis=1)], axis=1) . treino.head() . quartos endereco metragem banheiros vagas precos . 1 1.098612 | rua das grumixamas, 253 - vila parque jabaquar... | 4.025352 | 1.098612 | 1.098612 | 7.611348 | . 23 1.098612 | avenida higienópolis - higienópolis, são paulo... | 4.709530 | 1.098612 | 1.098612 | 8.476580 | . 24 1.386294 | rua paulo de avelar, 571 - parada inglesa, são... | 3.713572 | 1.386294 | 1.386294 | 6.782192 | . 27 1.386294 | avenida cipriano rodrigues, 340 - vila formosa... | 4.025352 | 1.386294 | 1.386294 | 7.681560 | . 12 0.693147 | avenida marquês de são vicente, 2898 - barra f... | 4.262680 | 0.693147 | 0.693147 | 7.863651 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; teste = teste.fillna(treino_medianas) teste.head() . endereco metragem quartos banheiros vagas precos . 16 rua diogo jácome, 518 - vila nova conceição, s... | 134 | 1 | 1 | 1 | 22000 | . 10 rua herculano de freitas, 131 - bela vista, sã... | 38 | 1 | 1 | 1 | 1600 | . 20 rua carolina fonseca, 407 - vila santana, são ... | 49 | 1 | 1 | 1 | 1778 | . 6 praça júlio mesquita, 97 - santa ifigênia, são... | 50 | 1 | 1 | 1 | 3300 | . 2 rua caio prado, 247 - consolação, são paulo - sp | 35 | 1 | 1 | 1 | 2700 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; teste[num_cols] = teste[num_cols].apply(np.log1p) teste.head() . endereco metragem quartos banheiros vagas precos . 16 rua diogo jácome, 518 - vila nova conceição, s... | 4.905275 | 0.693147 | 0.693147 | 0.693147 | 9.998843 | . 10 rua herculano de freitas, 131 - bela vista, sã... | 3.663562 | 0.693147 | 0.693147 | 0.693147 | 7.378384 | . 20 rua carolina fonseca, 407 - vila santana, são ... | 3.912023 | 0.693147 | 0.693147 | 0.693147 | 7.483807 | . 6 praça júlio mesquita, 97 - santa ifigênia, são... | 3.931826 | 0.693147 | 0.693147 | 0.693147 | 8.101981 | . 2 rua caio prado, 247 - consolação, são paulo - sp | 3.583519 | 0.693147 | 0.693147 | 0.693147 | 7.901377 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; teste_onehot = pd.get_dummies(teste[cat_cols]) teste=pd.concat([teste_onehot, teste[num_cols]], axis=1) teste.head() . quartos metragem quartos banheiros vagas precos . 16 0.693147 | 4.905275 | 0.693147 | 0.693147 | 0.693147 | 9.998843 | . 10 0.693147 | 3.663562 | 0.693147 | 0.693147 | 0.693147 | 7.378384 | . 20 0.693147 | 3.912023 | 0.693147 | 0.693147 | 0.693147 | 7.483807 | . 6 0.693147 | 3.931826 | 0.693147 | 0.693147 | 0.693147 | 8.101981 | . 2 0.693147 | 3.583519 | 0.693147 | 0.693147 | 0.693147 | 7.901377 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; treino.to_csv(&#39;treino_preprocessado.csv&#39;, index=False) . teste.to_csv(&#39;teste_preprocessado.csv&#39;, index=False) .",
            "url": "https://carloseduardopontes.github.io/fastpage/2022/08/15/_EDA_Calculadora_de_Aluguel.html",
            "relUrl": "/2022/08/15/_EDA_Calculadora_de_Aluguel.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Coloriza Brasil Fastpages Notebook",
            "content": ". Essa rede neural colore fotos . from deoldify_wrapper import DeOldify . Importing Libraries No module named &#39;deoldify&#39; DeOldify not found, installing.. Cloning DeOldify Repository... Opening DeOldify Folder Importing Libraries . /content/deoldify_wrapper.py:36: UserWarning: WARNING: GPU not available. Activate it on Colab at Edit &gt; Notebook Settings warnings.warn(&#39;WARNING: GPU not available. Activate it on Colab at Edit &gt; Notebook Settings&#39;) . Installing Colab requirements... Importing DeOldify Visualize module and FastAI Downloading Colorizer Model . deo = DeOldify() . Initializing Colorizer . /usr/local/lib/python3.7/dist-packages/fastai/data_block.py:442: UserWarning: Your training set is empty. If this is by design, pass `ignore_empty=True` to remove this warning. warn(&#34;Your training set is empty. If this is by design, pass `ignore_empty=True` to remove this warning.&#34;) /usr/local/lib/python3.7/dist-packages/fastai/data_block.py:445: UserWarning: Your validation set is empty. If this is by design, use `split_none()` or pass `ignore_empty=True` when labelling to remove this warning. or pass `ignore_empty=True` when labelling to remove this warning.&#34;&#34;&#34;) /usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 8 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary. cpuset_checked)) Downloading: &#34;https://download.pytorch.org/models/resnet101-63fe2227.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet101-63fe2227.pth . Done! . Coloriza&#231;&#227;o de Imagem do jogador do S&#227;o Paulo Gerson . url =&#39;https://www.superprof.com.br/blog/wp-content/uploads/2018/05/olho-pb.jpg&#39; . deo.colorize(url, render_factor=10) .",
            "url": "https://carloseduardopontes.github.io/fastpage/fastpages/jupyter/2022/08/15/_Coloriza.html",
            "relUrl": "/fastpages/jupyter/2022/08/15/_Coloriza.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Classificação",
            "content": ". import pandas as pd import matplotlib.pyplot as plt import seaborn as sns . df = pd.read_csv(&#39;Churn_Modelling.csv&#39;, sep=&#39;,&#39;) df.head() . RowNumber CustomerId Surname CreditScore Geography Gender Age Tenure Balance NumOfProducts HasCrCard IsActiveMember EstimatedSalary Exited . 0 1 | 15634602 | Hargrave | 619 | France | Female | 42 | 2 | 0.00 | 1 | 1 | 1 | 101348.88 | 1 | . 1 2 | 15647311 | Hill | 608 | Spain | Female | 41 | 1 | 83807.86 | 1 | 0 | 1 | 112542.58 | 0 | . 2 3 | 15619304 | Onio | 502 | France | Female | 42 | 8 | 159660.80 | 3 | 1 | 0 | 113931.57 | 1 | . 3 4 | 15701354 | Boni | 699 | France | Female | 39 | 1 | 0.00 | 2 | 0 | 0 | 93826.63 | 0 | . 4 5 | 15737888 | Mitchell | 850 | Spain | Female | 43 | 2 | 125510.82 | 1 | 1 | 1 | 79084.10 | 0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df.isnull().sum() . RowNumber 0 CustomerId 0 Surname 0 CreditScore 0 Geography 0 Gender 0 Age 0 Tenure 0 Balance 0 NumOfProducts 0 HasCrCard 0 IsActiveMember 0 EstimatedSalary 0 Exited 0 dtype: int64 . df.head() . RowNumber CustomerId Surname CreditScore Geography Gender Age Tenure Balance NumOfProducts HasCrCard IsActiveMember EstimatedSalary Exited . 0 1 | 15634602 | Hargrave | 619 | France | Female | 42 | 2 | 0.00 | 1 | 1 | 1 | 101348.88 | 1 | . 1 2 | 15647311 | Hill | 608 | Spain | Female | 41 | 1 | 83807.86 | 1 | 0 | 1 | 112542.58 | 0 | . 2 3 | 15619304 | Onio | 502 | France | Female | 42 | 8 | 159660.80 | 3 | 1 | 0 | 113931.57 | 1 | . 3 4 | 15701354 | Boni | 699 | France | Female | 39 | 1 | 0.00 | 2 | 0 | 0 | 93826.63 | 0 | . 4 5 | 15737888 | Mitchell | 850 | Spain | Female | 43 | 2 | 125510.82 | 1 | 1 | 1 | 79084.10 | 0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df_VarUsadas = df[[&#39;CreditScore&#39;,&#39;Geography&#39;,&#39;Gender&#39;, &#39;Age&#39;, &#39;Tenure&#39;,&#39;Balance&#39;,&#39;NumOfProducts&#39;,&#39;HasCrCard&#39;,&#39;IsActiveMember&#39;,&#39;EstimatedSalary&#39;,&#39;Exited&#39;]] . df_VarUsadas.describe() . CreditScore Age Tenure Balance NumOfProducts HasCrCard IsActiveMember EstimatedSalary Exited . count 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.00000 | 10000.000000 | 10000.000000 | 10000.000000 | . mean 650.528800 | 38.921800 | 5.012800 | 76485.889288 | 1.530200 | 0.70550 | 0.515100 | 100090.239881 | 0.203700 | . std 96.653299 | 10.487806 | 2.892174 | 62397.405202 | 0.581654 | 0.45584 | 0.499797 | 57510.492818 | 0.402769 | . min 350.000000 | 18.000000 | 0.000000 | 0.000000 | 1.000000 | 0.00000 | 0.000000 | 11.580000 | 0.000000 | . 25% 584.000000 | 32.000000 | 3.000000 | 0.000000 | 1.000000 | 0.00000 | 0.000000 | 51002.110000 | 0.000000 | . 50% 652.000000 | 37.000000 | 5.000000 | 97198.540000 | 1.000000 | 1.00000 | 1.000000 | 100193.915000 | 0.000000 | . 75% 718.000000 | 44.000000 | 7.000000 | 127644.240000 | 2.000000 | 1.00000 | 1.000000 | 149388.247500 | 0.000000 | . max 850.000000 | 92.000000 | 10.000000 | 250898.090000 | 4.000000 | 1.00000 | 1.000000 | 199992.480000 | 1.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df_VarUsadas.corr() . CreditScore Age Tenure Balance NumOfProducts HasCrCard IsActiveMember EstimatedSalary Exited . CreditScore 1.000000 | -0.003965 | 0.000842 | 0.006268 | 0.012238 | -0.005458 | 0.025651 | -0.001384 | -0.027094 | . Age -0.003965 | 1.000000 | -0.009997 | 0.028308 | -0.030680 | -0.011721 | 0.085472 | -0.007201 | 0.285323 | . Tenure 0.000842 | -0.009997 | 1.000000 | -0.012254 | 0.013444 | 0.022583 | -0.028362 | 0.007784 | -0.014001 | . Balance 0.006268 | 0.028308 | -0.012254 | 1.000000 | -0.304180 | -0.014858 | -0.010084 | 0.012797 | 0.118533 | . NumOfProducts 0.012238 | -0.030680 | 0.013444 | -0.304180 | 1.000000 | 0.003183 | 0.009612 | 0.014204 | -0.047820 | . HasCrCard -0.005458 | -0.011721 | 0.022583 | -0.014858 | 0.003183 | 1.000000 | -0.011866 | -0.009933 | -0.007138 | . IsActiveMember 0.025651 | 0.085472 | -0.028362 | -0.010084 | 0.009612 | -0.011866 | 1.000000 | -0.011421 | -0.156128 | . EstimatedSalary -0.001384 | -0.007201 | 0.007784 | 0.012797 | 0.014204 | -0.009933 | -0.011421 | 1.000000 | 0.012097 | . Exited -0.027094 | 0.285323 | -0.014001 | 0.118533 | -0.047820 | -0.007138 | -0.156128 | 0.012097 | 1.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; plt.figure(figsize=(10,6)) sns.heatmap(data=df_VarUsadas.corr(), annot=True, center=0) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f870f942b10&gt; . X = df[[&#39;Age&#39;, &#39;Balance&#39;, &#39;EstimatedSalary&#39;]] X . Age Balance EstimatedSalary . 0 42 | 0.00 | 101348.88 | . 1 41 | 83807.86 | 112542.58 | . 2 42 | 159660.80 | 113931.57 | . 3 39 | 0.00 | 93826.63 | . 4 43 | 125510.82 | 79084.10 | . ... ... | ... | ... | . 9995 39 | 0.00 | 96270.64 | . 9996 35 | 57369.61 | 101699.77 | . 9997 36 | 0.00 | 42085.58 | . 9998 42 | 75075.31 | 92888.52 | . 9999 28 | 130142.79 | 38190.78 | . 10000 rows × 3 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; y = df[[&#39;Exited&#39;]] y . Exited . 0 1 | . 1 0 | . 2 1 | . 3 0 | . 4 0 | . ... ... | . 9995 0 | . 9996 0 | . 9997 1 | . 9998 1 | . 9999 0 | . 10000 rows × 1 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; X.shape, y.shape . ((10000, 3), (10000, 1)) . from sklearn.model_selection import train_test_split SEED = 42 X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.25, random_state = SEED) . y_teste . Exited . 6252 0 | . 4684 0 | . 1731 0 | . 4742 0 | . 4521 0 | . ... ... | . 4862 0 | . 7025 1 | . 7647 0 | . 7161 0 | . 73 0 | . 2500 rows × 1 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; from sklearn.dummy import DummyClassifier dc = DummyClassifier(strategy=&#39;stratified&#39;, random_state=SEED) . dc.fit(X_treino, y_treino) . DummyClassifier(random_state=42, strategy=&#39;stratified&#39;) . print (X_treino.shape, y_treino.shape, X_teste.shape, y_teste.shape) . (7500, 3) (7500, 1) (2500, 3) (2500, 1) . result = dc.predict(X_teste) result . array([0, 1, 0, ..., 1, 1, 0]) . from sklearn.ensemble import RandomForestClassifier . rfc = RandomForestClassifier() rfc.fit (X_treino, y_treino) result_rfc = rfc.predict(X_teste) result_rfc . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). . array([0, 1, 0, ..., 0, 0, 0]) . from sklearn.svm import SVC . svc = SVC() svc.fit(X_treino, y_treino) result_svc = svc.predict(X_teste) result_svc . /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) . array([0, 0, 0, ..., 0, 0, 0]) . from sklearn.svm import SVC . svc = SVC() svc.fit(X_treino, y_treino) result_svc = svc.predict(X_teste) result_svc . Avalia&#231;&#227;o do modelo . dc.score(X_teste, y_teste) . 0.6748 . rfc.score(X_teste, y_teste) . 0.7856 . svc.score(X_teste, y_teste) . 0.8012 .",
            "url": "https://carloseduardopontes.github.io/fastpage/fastpages/jupyter/2022/08/15/_Classifica%C3%A7%C3%A3o.html",
            "relUrl": "/fastpages/jupyter/2022/08/15/_Classifica%C3%A7%C3%A3o.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Coloriza Brasil Fastpages Notebook",
            "content": ". Essa rede neural colore fotos . from deoldify_wrapper import DeOldify . Importing Libraries No module named &#39;deoldify&#39; DeOldify not found, installing.. Cloning DeOldify Repository... Opening DeOldify Folder Importing Libraries . /content/deoldify_wrapper.py:36: UserWarning: WARNING: GPU not available. Activate it on Colab at Edit &gt; Notebook Settings warnings.warn(&#39;WARNING: GPU not available. Activate it on Colab at Edit &gt; Notebook Settings&#39;) . Installing Colab requirements... Importing DeOldify Visualize module and FastAI Downloading Colorizer Model . Coloriza&#231;&#227;o de Imagem do jogador do S&#227;o Paulo Gerson . url =&#39;https://i.pinimg.com/564x/d9/05/40/d90540d704039a35dac06d5beb723216.jpg&#39; .",
            "url": "https://carloseduardopontes.github.io/fastpage/fastpages/jupyter/2022/08/15/C%C3%B3pia_de_2022_03_28_Coloriza.html",
            "relUrl": "/fastpages/jupyter/2022/08/15/C%C3%B3pia_de_2022_03_28_Coloriza.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Automação em Python",
            "content": "Essa Programação desenvolvida em Python automatiza processos. . Neste caso específico será acessado o google drive de uma pessoa, mas pode ser um sistema qualquer, basta desenvolver mais essa aplicação, e um download de um arquivo será feito. . Em seguida haverá um tratamento de dados com o uso da biblioteca Pandas para realizar alguns cálculos. . Por fim será enviado um email com esses dados coletados. . !pip install pyautogui !pip install pyperclip . import pyautogui import pyperclip import time #Delay para iniciar o processo pyautogui.PAUSE = 2 #Inicio da Automação pyautogui.press(&quot;win&quot;) pyautogui.write(&quot;edge&quot;) pyautogui.press(&quot;enter&quot;) #Acessa o google drive ou um sistema pyperclip.copy(&quot;https://docs.google.com/spreadsheets/d/1MBdiXVFBAWHnpYfVZmR4yuEPb_1M77BmTTqtuoYlCiA/edit?resourcekey=0-xVMksOgVXG8IAwA_vuxSTg#gid=653912415&quot;) pyautogui.hotkey(&quot;ctrl&quot;,&quot;v&quot;) pyautogui.press(&quot;enter&quot;) #Aguarda carregar o sistema time.sleep(5) #inicia o processo de Download pyautogui.click(x=106, y=119) pyautogui.click(x=184, y=366) pyautogui.click(x=436, y=371) #esperar o download acabar, quanto maior o arquivo, maior o tempo de espera time.sleep(4) . import pandas as pd #abrir o arquivo que foi feito o download e tratar os dados tabela = pd.read_excel(r&#39;C: Users cedua Downloads Cópia de Exercício aula banco de dados.xlsx&#39;) display(tabela) TotalVendido = tabela[&quot;unidades vendidas&quot;].sum() TotalSabores = tabela[&quot;sabores&quot;].unique() display(TotalVendido) display(TotalSabores) . . pyautogui.hotkey(&quot;ctrl&quot;,&quot;t&quot;) pyperclip.copy(&quot;https://mail.google.com/mail/u/0/#inbox&quot;) pyautogui.hotkey(&quot;ctrl&quot;,&quot;v&quot;) pyautogui.press(&quot;enter&quot;) time.sleep(4) #Clicar no botão Escrever do Gmail pyautogui.click(x=102, y=170) #preencher o destinatário que vai receber o relatório pyautogui.write(&#39;ceduardo.pontes@hotmail.com&#39;) pyautogui.press(&#39;tab&#39;) #para selecionar o email pyautogui.press(&#39;tab&#39;) #Assunto pyautogui.write(&#39;Relatório de Vendas xx-xx-xx&#39;) pyautogui.press(&#39;tab&#39;) #Para ir ao compo do e-mail #Escrever o email - ps. f antes do texto vai deixar o texto dinâmico texto = f&quot;&quot;&quot; Prezados, bom dia A quantidade de unidades vendidas no período de xx-xx-xx foi de {TotalVendido} un. Os produtos mais vendidos foram: {TotalSabores} Att, Carlos Eduardo &quot;&quot;&quot; pyperclip.copy(texto) pyautogui.hotkey(&quot;ctrl&quot;,&quot;v&quot;) pyautogui.click(x=843, y=686)#clicar no botão enviar . time.sleep(5) pyautogui.position() #Procura o local onde deseja saber os ponto x e y e da um clique. Retorne aqui e veja os pontos! .",
            "url": "https://carloseduardopontes.github.io/fastpage/fastpages/jupyter/2022/08/15/Automacao-15-04-2022.html",
            "relUrl": "/fastpages/jupyter/2022/08/15/Automacao-15-04-2022.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://carloseduardopontes.github.io/fastpage/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://carloseduardopontes.github.io/fastpage/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . Além de ser apaixonado por Tecnologia, atuei, nos últimos 10 anos, na área de logística em empresas de transportes e armazenagem e em grandes redes de fast food liderando equipes. Minhas atividades contribuíram para o crescimento e expansão das redes de restaurantes por onde trabalhei. . Sou Tecnólogo formado pelo Centro Paula Souza - FATEC - nas área de Logística, construção civil e atualmente estou me formando em Análise e Desenvolvimento de Sistemas. Possuo certificação em Full Stack Developer, com atuação em Javascript, pela Digital House, além do aprimoramento extensivo em Ciência de Dados, pela escola de tecnologia Awari. . Meu propósito é uma transição de carreira, tenho apreço especial na área de Ciência de Dados, em desenvolver novas habilidades, o que me faz focar na preparação acadêmica, em cursos de ciência de dados e no universo que este caminho me possibilita. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://carloseduardopontes.github.io/fastpage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://carloseduardopontes.github.io/fastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}